"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonValidator = void 0;
const joi = require("@hapi/joi");
const provider_1 = require("./provider");
const schemaCache = new Map();
class CommonValidator {
    static _getJoi() {
        let Joi = provider_1.CommonProvider.get(provider_1.PROVIDER_KEY_JOI);
        if (!Joi) {
            Joi = joi;
            provider_1.CommonProvider.register({
                key: provider_1.PROVIDER_KEY_JOI,
                use: Joi,
            });
        }
        return Joi;
    }
    /**
     * static method to provide a singleton schema object reference
     * @param factory - Joi schema factory accepting a single argument, the joi validator object.
     */
    static getSchema(factory) {
        if (!schemaCache.has(factory)) {
            const schema = factory(this._getJoi());
            schemaCache.set(factory, schema);
        }
        return schemaCache.get(factory);
    }
    static useInBrowser() {
        provider_1.CommonProvider.register({
            key: provider_1.PROVIDER_KEY_JOI,
            use: require('joi-browser'),
        });
    }
    /**
     * static validation method
     * @param factory - Joi schema factory (joi): Joi.Schema
     * @param payload - Payload to validate against schema
     * @param options - Validation options (optional)
     */
    static validate(factory, payload, options) {
        return this.getSchema(factory).validate(payload, options);
    }
}
exports.CommonValidator = CommonValidator;
