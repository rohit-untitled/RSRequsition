/// <reference types="express" />
import { express } from './abstract';
import { Message, MessageModel } from '../lib/message';
/**
 * Configuration details for sending messages to bots on a webhook channel.
 */
export interface WebhookChannel {
    /** webhook url issued by bots platform channel */
    url: string;
    /** message signature secret key used to create X-Hub-Signature */
    secret: string;
}
/**
 * Callback used by webhook client to obtain channel configuration information.
 * The req object is the first argument when called within the receiver.
 * for a given request.
 */
export interface WebhookChannelCallback {
    (req?: express.Request): WebhookChannel | Promise<WebhookChannel>;
}
/**
 * Option for webhook channel configuration.
 */
export declare type WebhookChannelOption = WebhookChannel | WebhookChannelCallback;
/**
 * Options to configure a webhook client endpoint where messages are forwarded
 * to the bot on a webhook channel.
 */
export interface WebhookClientOptions {
    /** object or async callback to specify the webhook channel configuration details */
    channel?: WebhookChannelOption;
}
/**
 * Webhook message receiver callback. Called when a message is sent by bot to
 * the webhook endpoint.
 */
export interface WebhookRecieverCallback extends express.RequestHandler {
    /** Error if the webhook message fails validation, and message when valid */
    (req: express.Request & {
        /** req.body as verified bot message */
        body: Message;
    }, res: express.Response, next: express.NextFunction): void;
}
export declare enum WebhookEvent {
    /** Error event */
    ERROR = 1,
    /** Event dispatched when message is sent to bot */
    MESSAGE_SENT = 2,
    /** Event dispatched when message is received from bot */
    MESSAGE_RECEIVED = 3
}
export interface WebhookEventCallback {
    (...args: any[]): void;
}
export declare class WebhookClient {
    private _subscriptions;
    private _options;
    constructor(options?: WebhookClientOptions);
    private _getSubscriptions;
    private _dispatch;
    private _getChannelConfig;
    /**
     * Subscribe to bot client events
     * @param event - Event type to subscribe
     * @param handler - Corresponding event type handler.
     */
    on(event: WebhookEvent.ERROR, handler: (error: Error) => void): this;
    on(event: WebhookEvent.MESSAGE_SENT, handler: (message: Message) => void): this;
    on(event: WebhookEvent.MESSAGE_RECEIVED, handler: (response: Message) => void): this;
    /**
     * Send user message to bot
     * @param message - Complete payload to send
     * @param channel - Webhook channel configuration to use (if different than that in the instance options)
     */
    send(message: Message, channel?: WebhookChannel): Promise<void>;
    /**
     * Webhook receiver middleware.
     * @param callback - callback on message received, otherwise emits event
     */
    receiver(callback?: WebhookRecieverCallback): express.RequestHandler;
    /**
     * webhook request validation. supported either as middleware layer, or
     * receiver callback
     */
    private _receiverValidationHandler;
    /**
     * Returns the MessageModel class for creating or validating messages to or from bots.
     */
    MessageModel(): typeof MessageModel;
}
