"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserMiddleware = void 0;
const bodyParser = require("body-parser");
const constants_1 = require("../common/constants");
const abstract_1 = require("./abstract");
/**
 * Body parser middleware
 */
class ParserMiddleware extends abstract_1.MiddlewareAbstract {
    _init(service, options) {
        if (options.urlencoded || options.urlencoded == null) {
            this._addParser(service, bodyParser.urlencoded(this._getOptions({ extended: true }, options.urlencoded)));
        }
        if (options.json || options.json == null) {
            this._addParser(service, bodyParser.json(this._getOptions({}, options.json)));
        }
    }
    /**
     * add/replace parser to the application or router stack.
     * @param service - application or router layer to add
     * @param parser - body parser middleware
     */
    _addParser(service, parser) {
        let stack = (service && (service['_router'] || service).stack) || [];
        let replaced = false;
        // find/replace in stack
        stack.filter(layer => layer.name === parser.name)
            .forEach(layer => {
            replaced = true;
            layer.handle = parser;
        });
        // add to stack if not already replaced
        if (!replaced) {
            service.use(parser);
        }
    }
    /**
     * get common options object
     */
    _commonOptions() {
        const { limit, verify } = this.options;
        return {
            limit: limit || '5mb',
            verify: (req, res, buf, encoding) => {
                // Instead of just letting bodyParser.json to parse the raw message to JSON, the rawMessage and its encoding is saved as properties
                // 'rawBody' and 'encoding' for use in signature verification in method verifyMessageFormat.
                req[constants_1.CONSTANTS.PARSER_RAW_BODY] = buf;
                req[constants_1.CONSTANTS.PARSER_RAW_ENCODING] = encoding;
                return verify ? verify(req, res, buf, encoding) : true;
            }
        };
    }
    /**
     * get final parser options by combining defaults with user-defined opts
     * @param {object} defaults - parser default options
     * @param {*} opts - user defined options
     */
    _getOptions(defaults, opts) {
        opts = typeof opts === 'object' ? opts : {};
        return Object.assign(defaults, opts, this._commonOptions());
    }
}
exports.ParserMiddleware = ParserMiddleware;
