"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentMiddleware = void 0;
const registry_1 = require("../lib/component/registry");
const abstract_1 = require("./abstract");
const shell_1 = require("../lib/component/shell");
const codes_1 = require("./codes");
/**
 * define req.param keys
 */
// const [PARAM_COLLECTION, PARAM_COMPONENT] = ['collection', 'component'];
const [PARAM_COMPONENT] = ['component'];
/**
 * ComponentMiddleware.
 * @extends MiddlewareAbstract
 */
class ComponentMiddleware extends abstract_1.MiddlewareAbstract {
    _init(service, options) {
        if (!service || typeof service.get !== 'function' || typeof service.post !== 'function') {
            throw new Error('Cannot initialize component middleware: service argument is required');
        }
        const opts = Object.assign({ 
            // option defaults
            // autocollect: ComponentRegistry.COMPONENT_DIR,
            baseUrl: '/', register: [], mixins: {} }, options);
        /**
         * assemble root registry from provided `register` property
         * merge explicitly provided component registry with the hierarchical fs registry.
         */
        const rootRegistry = registry_1.ComponentRegistry.create(opts.register, opts.cwd);
        const { baseUrl } = opts;
        /**
         * establish component metadata index
         */
        service.get(this.__endpoint(baseUrl, '/'), (req, res) => {
            const meta = this.__getShell(rootRegistry)
                .getAllComponentMetadata();
            res.json(meta);
        });
        /**
         * handle custom component invocation
         */
        service.post(this.__endpoint(baseUrl, `/:${PARAM_COMPONENT}`), (req, res) => {
            const componentName = req.params[PARAM_COMPONENT];
            // invoke
            this.__invoke(componentName, rootRegistry, opts, req, res);
        });
        /**
         * handle ResolveEntities event handler invocation
         * @param req - MobileCloudRequest
         */
        service.post(this.__endpoint(baseUrl, `/resolveentities/:${PARAM_COMPONENT}`), (req, res) => {
            const componentName = req.params[PARAM_COMPONENT];
            const mixins = Object.assign({}, opts.mixins);
            this.__getShell(rootRegistry).invokeResolveEntitiesEventHandler(componentName, req.body, this.__invocationCb(res), mixins);
        });
    }
    /**
     * construct an endpoint from base and url
     * @param base - base url
     * @param url - endpoint url
     */
    __endpoint(base, url) {
        return '/' + [base, url].map(part => part.replace(/^\/|\/$/g, ''))
            .filter(part => !!part)
            .join('/');
    }
    /**
     * get Shell methods
     * @param registry - The registry for the invocation shell
     */
    __getShell(registry) {
        return shell_1.ComponentShell({ logger: this._logger }, registry);
    }
    /**
     * invoke the component shell.
     * @param componentName: string - component name
     * @param registry - registry to which the component belongs
     * @param options - Middleware options reference.
     * @param req - MobileCloudRequest
     * @param res - express.Response
     */
    __invoke(componentName, registry, options, req, res) {
        // apply mixins and invoke component
        const mixins = Object.assign({}, options.mixins);
        if (!!req.oracleMobile) {
            mixins.oracleMobile = req.oracleMobile;
        }
        this.__getShell(registry)
            .invokeComponentByName(componentName, req.body, mixins, this.__invocationCb(res));
    }
    /**
     * convenience handler for CC invocation
     * @param res: express.Response
     */
    __invocationCb(res) {
        return (err, data) => {
            // direct port from components.js
            if (!err) {
                res.status(codes_1.STATUS_CODE.OK).json(data);
            }
            else {
                switch (err.name) {
                    case 'unknownComponent':
                        res.status(codes_1.STATUS_CODE.NOT_FOUND).send(err.message);
                        break;
                    case 'badRequest':
                        res.status(codes_1.STATUS_CODE.BAD_REQUEST).send(err.message);
                        break;
                    default:
                        res.status(codes_1.STATUS_CODE.INTERNAL_SERVER_ERROR).send(err.message);
                        break;
                }
            }
        };
    }
}
exports.ComponentMiddleware = ComponentMiddleware;
