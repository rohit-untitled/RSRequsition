"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolveEntitiesEventHandlers = exports.invokeResolveEntitiesEventHandlers = void 0;
/**
 * Invoke an entity resolution component
 * @param {object} component - component instance
 * @param {EntityResolutionContext} context - context derived for this invocation
 * @private
 */
function invokeResolveEntitiesEventHandlers(component, context) {
    return __awaiter(this, void 0, void 0, function* () {
        let logger = context.logger();
        // TODO: can we also support handlers as object instead of function?
        let entityHandlers = component.handlers();
        for (let event of context.getRequest().events) {
            let eventName = event.name;
            let itemName = event.eventItem;
            let handler;
            let handlerPath;
            if (itemName) {
                // retrieve item event handler
                handler = entityHandlers.items[itemName][eventName];
                handlerPath = `${itemName}.${eventName}`;
            }
            else if (event.custom) {
                // retrieve custom event handler
                handler = entityHandlers.custom[eventName];
                handlerPath = `custom.${eventName}`;
            }
            else {
                // retrieve entity event handler
                handler = entityHandlers.entity[eventName];
                handlerPath = `entity.${eventName}`;
            }
            if (handler) {
                // event handlers can be async (returning a promise), but we dont want to enforce
                // every event handler is async, hence Promise.resolve wrapping of invocation
                let returnValue = yield Promise.resolve(handler(event.properties || {}, context));
                // make sure return value is a boolean
                let retValue = returnValue === undefined ? true : (returnValue + '' === 'true');
                if (eventName === 'shouldPrompt') {
                    context._getShouldPromptCache()[itemName] = retValue;
                    if (retValue) {
                        // only invoke next shouldPrompt handler when current handler returned false
                        break;
                    }
                }
                else if (eventName === 'validate') {
                    if (retValue && Object.keys(context.getValidationErrors()).length > 0) {
                        // if validation error is registered, return value should always be false
                        retValue = false;
                    }
                    context.getResponse().validationResults[handlerPath] = retValue;
                    if (!retValue && !context.getEntityResolutionStatus().editFormMode) {
                        // only invoke next validate handler when current handler returned true
                        // or we are in edit form mode
                        break;
                    }
                }
            }
            else {
                logger.error(`No handler found for event: ${handlerPath}`);
                break;
            }
        }
    });
}
exports.invokeResolveEntitiesEventHandlers = invokeResolveEntitiesEventHandlers;
/**
 * Resolve the event handlers defined by the component
 * @param {object} component - component implementation
 * @private
 */
function getResolveEntitiesEventHandlers(component) {
    let events = [];
    let handlers = (typeof component.handlers === 'function') ? component.handlers() : component.handlers;
    if (handlers) {
        Object.keys(handlers).forEach(key => {
            if (key === 'entity') {
                Object.keys(handlers[key]).forEach(event => {
                    events.push(`entity.${event}`);
                });
            }
            if (key === 'items') {
                Object.keys(handlers[key]).forEach(itemKey => {
                    Object.keys(handlers[key][itemKey]).forEach(event => {
                        events.push(`items.${itemKey}.${event}`);
                    });
                });
            }
            if (key === 'custom') {
                Object.keys(handlers[key]).forEach(event => {
                    events.push(`custom.${event}`);
                });
            }
        });
    }
    return events;
}
exports.getResolveEntitiesEventHandlers = getResolveEntitiesEventHandlers;
