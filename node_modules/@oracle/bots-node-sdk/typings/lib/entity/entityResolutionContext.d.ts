import { BaseContext } from '../component/baseContext';
import { MessagePayload, NonRawMessagePayload } from '../message';
import { KeyValuePairs } from '../component/kinds';
import { RawMessage, NonRawMessage } from '../../lib2';
export interface EntityMap {
    entityName?: string;
    [name: string]: any;
}
export interface CompositeBagItem {
    sequenceNr: number;
    name: string;
    fullName: string;
    type: string;
    entityName?: string;
    description?: string;
    children?: CompositeBagItem[];
    label?: string;
}
export interface EntityResolutionStatus {
    name?: string;
    resolvingField?: string;
    validationErrors?: {
        [name: string]: string | Error;
    };
    skippedItems?: string[];
    updatedEntities?: CompositeBagItem[];
    outOfOrderMatches?: CompositeBagItem[];
    allMatches?: CompositeBagItem[];
    disambiguationValues: {
        [name: string]: any[];
    };
    disambiguationMatches: {
        [name: string]: any;
    };
    userInput?: string;
    enumValues: object[];
    useFullEntityMatches: boolean;
    customProperties: {
        [name: string]: any;
    };
    shouldPromptCache: any;
    nextRangeStart?: number;
    previousRangeStart?: number;
    rangeSize?: number;
    needShowMoreButton?: boolean;
    needShowPreviousButton?: boolean;
    promptCount?: number;
    prompt?: string;
    formMode?: string;
    editFormMode?: boolean;
    readOnlyFormMode?: boolean;
    initialized?: boolean;
    resolved?: boolean;
    submittedFields?: {
        [name: string]: any[];
    };
    entityMatches?: any;
    variable?: string;
    newItemMatches: {
        [name: string]: any;
    };
}
export interface SystemEntityDisplayProperty {
    properties: string[];
    function?: (...args: string[]) => string;
}
/**
 * The Bots EntityResolutionContext is a class for querying, validating and changing a composite bag entity and its
 * entity resolution status.
 * </p>
 * An EntityResolutionContext class instance is passed as an argument to every event handler function.
 * @memberof module:Lib
 */
export declare class EntityResolutionContext extends BaseContext {
    private readonly _entityStatus;
    private _entity;
    private _systemEntityDisplayProperties;
    /**
     * Constructor of entity resolution context.
     * DO NOT USE - INSTANCE IS ALREADY PASSED TO EVENT HANDLERS
     * @param {object} request
     */
    constructor(request: any);
    /**
     * Returns the value of the composite bag entity currently being resolved
     * @return {object} The JSON object holding the composite bag item values
     */
    getEntity(): EntityMap;
    /**
     * Sets the value of the composite bag entity currently being resolved
     * @param {object} newEntity - The JSON object holding the composite bag item values
     */
    setEntity(newEntity: EntityMap): void;
    /**
     * Returns the name of the composite bag entity type currently being resolved
     * @return {string} name of the composite bag entity type
     */
    getEntityName(): string;
    /**
     * Returns list of composite bag item definitions
     * @return {object[]} list of composite bag item definitions
     */
    getEntityItems(): CompositeBagItem[];
    /**
     * Returns composite bag item definition for the (nested) bag item name
     * @param {string} fullName - the full name of the (nested) composite bag item for which the value is returned
     * @return {CompositeBagItem} composite bag item definition
     */
    getEntityItem(fullName: string): any;
    /**
     * Return value of a composite bag item in the composite bag entity currentyly being resolved
     * @param {string} fullName - the full name of the (nested) composite bag item for which the value is returned
     * @return {object} value of the composite bag item
     */
    getItemValue(fullName: string): any;
    /**
     * Set value of a (nested) composite bag item in the composite bag entity currentyly being resolved
     * @param {string} fullName - the full name of the composite bag item for which the value is set
     * @param {object} value - value of the composite bag item
     */
    setItemValue(fullName: string, value: any): void;
    /**
     * Remove the value of a composite bag item from the composite bag entity JSON object
     * @param {string} fullName - full name of the composite bag item
     */
    clearItemValue(fullName: string): void;
    /**
     * Add a validation error for a composite bag item. This marks the item invalid and the
     * the item will not be set/updated with the new invalid value. The error mesage will be
     * published as bot message to the user.
     * @param {string} itemName - name of composite bag iten that validation error applies to
     * @param {string} error - the error message
     */
    addValidationError(itemName: string, error: string): void;
    /**
     * Returns validation errors
     * @return {object} validation errors keyed by item name
     */
    getValidationErrors(): {
        [name: string]: string | Error;
    };
    /**
     * Returns the disambiguation values that are found based on the last user input for a specific bag item
     * @return {object[]} the disambiguations values. This is a string array for bag items that have a custom
     * entity type, and a JSONObject array for bag items with a system entity type
     * @param {string} itemName - name of the composite bag item
     */
    getDisambiguationValues(itemName: string): any[];
    /**
     * Sets the disambiguation values for a specific bag item
     * @param {string} itemName - name of the composite bag item
     * @param {object[]} disambiguationValues - this is a string array for bag items that have a custom
     * entity type, and a JSONObject array for bag items with a system entity type
     */
    setDisambiguationValues(itemName: string, disambiguationValues: any[]): void;
    /**
     * Removes the disambiguation values that are found based on the last user input for a specific bag item
     * @param {string} itemName - name of the composite bag item, if not specified, all disambiguation values
     * of all items will be cleared
     */
    clearDisambiguationValues(itemName?: string): void;
    /**
     * Removes the disambiguation items that are matched for a single entity value using the last user input.
     * @param {string} itemName - full name of the first composite bag item that matches the entity value,
     * if not specified, all disambiguation items will be cleared
     */
    clearDisambiguationItems(itemName?: string): void;
    /**
     * Returns the name of the bag item that is currently being resolved
     * @return {string} the bag item name
     */
    getCurrentItem(): string;
    /**
     * Returns the last user input message. If the last message was not a text message, this function returns undefined
     * @return {string} the user text message
     */
    getUserInput(): string;
    /**
     * Returns boolean flag indicating whether the component used to resolve the composite bag entity
     * (System.ResolveEntities or System.CommonResponse) has set the useFullEntityMatches property to true.
     * When set to true, custom entity values are stored as JSON object, similar to the builtin entities
     * that are always stored as JSON object.
     *
     * @return {boolean} fullEntityMatches flag
     */
    isFullEntityMatches(): boolean;
    /**
     * Mark a composite bag item as skipped, which means the ResolveEntities or CommonResponse component
     * will no longer prompt for a value for the bag item
     * @param {string} name - name of the composite bag item
     */
    skipItem(name: string): void;
    /**
     * Unmark a composite bag item as skipped, which means the ResolveEntities or CommonResponse component
     * will prompt again for a value for the bag item
     * @param {string} name - name of the composite bag item
     */
    unskipItem(name: string): void;
    /**
     * Returns true when item is marked as skipped, returns false otherwise
     * @return {boolean} skip item flag
     * @param {string} name - name of the composite bag item
     */
    isSkippedItem(name: string): boolean;
    /**
     * Returns a list of the candidate bot messages created by the the ResolveEntities or CommonResponse component
     * that will be sent to the user when you use addCandidateMessages() function.
     * @return {NonRawMessagePayload[]} list of candidate messages. Note that these messages are in the JSON format of the conversation
     * message model (CMM).
     * @deprecated Use getCandidateMessageList instead
     */
    getCandidateMessages(): NonRawMessagePayload[];
    /**
     * Returns a list of the candidate bot messages created by the the ResolveEntities or CommonResponse component
     * that will be sent to the user when you use addCandidateMessages() function.
     * @returns {NonRawMessage[]} list of candidate messages. The messages are returned in the class representation of
     * each message type. You can cast the message to the proper type, modify it using the
     * available class methods, and you can add the message by calling context.addMessage().
     * <p>
     * See [Conversation Messaging]{@link https://github.com/oracle/bots-node-sdk/blob/master/MESSAGE_FACTORY.md}
     */
    getCandidateMessageList<T extends NonRawMessage>(): T[];
    /**
     * Add the bot messages created by ResolveEntities or CommomResponse component to the response that will
     * be sent to the user.
     * Note that these messages are in the format of the conversation message model (CMM).
     */
    addCandidateMessages(): void;
    /**
     * Returns the list of messages that will be sent to the user
     * @return list of messages
     * @deprecated use getMessageList instead
     */
    getMessages(): MessagePayload[];
    /**
     * Returns the list of messages that will be sent to the user
     * @returns {NonRawMessage[]} list of messages, returned in the class representation of  each message type.
     */
    getMessageList<T extends NonRawMessage>(): T[];
    /**
     * Adds a message to the bot response sent to the user.
     * @param {object} payload - can take a string message, a message created using the MessageFactory, or a message created using
     * the deprecated MessageModel.
     * @param {boolean} keepProcessing - If set to false (the default), the message will be sent to the user and
     * the ResolveEntities or CommonResponse component will stop any further processing, and wait for user input.
     * If set to true, the component will continue processing, possibly sending more messages to the
     * user before releasing the turn
     */
    addMessage(payload: string | NonRawMessage | RawMessage | MessagePayload, keepProcessing?: boolean): void;
    /**
     * Returns the composite bag item definitions that already had a value and have gotten a new value
     * extracted from the last user input.
     * @return {string[]} list of composite bag item definitions
     */
    getItemDefsUpdated(): CompositeBagItem[];
    /**
     * Returns the composite bag item (full) names that already had a value and have gotten a new value
     * extracted from the last user input.
     * @return {string[]} list of composite bag item full names
     * @deprecated use getItemDefsUpdated instead which returns the complete item definition instead of just the full name
     */
    getItemsUpdated(): string[];
    /**
     * Returns the composite bag item definitions that have gotten a new value
     * extracted from the last user input while the user was prompted for
     * another bag item.
     * @return {string[]} list of composite bag item definitions
     */
    getItemDefsMatchedOutOfOrder(): CompositeBagItem[];
    /**
     * Returns the composite bag item (fulll) names that have gotten a new value
     * extracted from the last user input while the user was prompted for
     * another bag item.
     * @return {string[]} list of composite bag item full names
     * @deprecated use getItemDefsMatchedOutOfOrder instead which returns the complete item definition instead of just the full name
     */
    getItemsMatchedOutOfOrder(): string[];
    /**
     * Returns the composite bag item definitions that have gotten a new value
     * extracted from the last user input
     * @return {string[]} list of composite bag item definitions
     */
    getItemDefsMatched(): CompositeBagItem[];
    /**
     * Returns the composite bag item (full) names) that have gotten a new value
     * extracted from the last user input
     * @return {string[]} list of composite bag item full names
     * @deprecated use getItemDefsMatched instead which returns the complete item definition instead of just the full name
     */
    getItemsMatched(): string[];
    /**
     * Returns list of enumeration values for the bag item that is currently being resolved.
     * This list is paginated, it only includes the values in current range
     * @return {object[]} list of enumeration values
     */
    getEnumValues(): object[];
    /**
     * A bag item of type system entity, LOCATION and ATTACHMENT has a JSON Object as value.
     * With this function you can override the default display properties of the JSON
     * Object that should be used to print out a string representation of the value.
     * @param {string} entityName - name of the system entity, or 'ATTACHMENT' or 'LOCATION'
     * @param {string[]} properties - array of property names
     */
    setSystemEntityDisplayProperties(entityName: string, properties: string[]): void;
    /**
     * A bag item of type system entity, LOCATION and ATTACHMENT has a JSON Object as value.
     * With this function you can override the default display function that is applied to the
     * display property values. The function is called with each display property as an argument
     * For example, this is the default display function for DURATION:
     * ((startDate,endDate) => new Date(startDate)+' - '+new Date(endDate))
     * If you want to format the dates differently, you can use a library like moments.js
     * and call this function to override the display function
     * Object that should be used to print out a string representation of the value.
     * @param {string} entityName - name of the system entity, or 'ATTACHMENT' or 'LOCATION'
     * @param {object} displayFunction - the display function applied to the display properties
     */
    setSystemEntityDisplayFunction(entityName: string, displayFunction: (...args: string[]) => string): void;
    /**
     * Returns the display value for a composite bag item.
     * For bag items with a custom entity type, the display value returned is the value property of the
     * JSON Object value when isFullEntityMatches returns true. When isFullEntityMatches returns false, the actual value is returned.
     * For STRING bag item types, the display value is the same as the actual value.
     * For system entities, and for bag item types LOCATION and ATTACHMENT the configured display
     * properties and display function determine the display value
     * @see isFullEntityMatches
     * @see setSystemEntityDisplayProperties
     * @see setSystemEntityDisplayFunction
     * @return {string} display value of composite bag item
     * @param {string} itemName - name of the composite bag item
     */
    getDisplayValue(itemName: string): any;
    /**
     * Returns the display values for a composite bag entity.
     * @see getDisplayValue
     * @see setSystemEntityDisplayProperties
     * @see setSystemEntityDisplayFunction
     * @return {object[]} list of display values of all bag items in the composite bag entity.
     * Each display value is an object with two properties, the name and the value.
     * @param {string} itemNames - you can specify one or more item names as argument. If you do this, only the display
     * values of these items will be returned. If you do not specify an item name, the display values of all
     * items in the bag will be returned.
     */
    getDisplayValues(): {
        name: string;
        value: any;
    }[];
    /**
     * Cancels the entity resolution process and sets the 'cancel' transition on the ResolveEntities or Common Response component.
     */
    cancel(): void;
    /**
     * Set a transition action. When you use this function, the entity resolution process is aborted, and the dialog engine will transition
     * to the state defined for this transition action.
     * <p>
     * NOTE: This method cannot be used in the init event handler
     * @param {string} action - name of the transition action
     */
    setTransitionAction(action: string): void;
    /**
     * Sets the value of a custom property that is stored in the entity resolution context. A custom property can be
     * used to maintain custom state accross event handler calls while resolving the composite bag entity.
     * If you set the value to null, the custom property will be removed.
     * @param {string} name - name of the custom property
     * @param {object} value - value of the custom property
     */
    setCustomProperty(name: string, value: any): void;
    /**
     * Returns the value of a custom property that is stored in the entity resolution context. A custom property can be
     * used to maintain custom state accross event handler calls while resolving the composite bag entity.
     * @return {object} value of the custom property
     * @param {string} name - name of the custom property
     */
    getCustomProperty(name: string): any;
    /**
    * Returns information about the entity resolution status
    * @return {EntityResolutionStatus} the status object
    */
    getEntityResolutionStatus(): EntityResolutionStatus;
    /**
    * Set the bag item matches. Note that this method only takes effect when invoked from the userInputReceived event handler.
    * @param {KeyValuePairs} matches - map where the key is the full item name and the value the item match object.
    * @return {EntityResolutionStatus} the status object
    */
    setItemMatches(matches: KeyValuePairs): void;
    /**
    * Clear the entity match for a specific bag item. Note that this method only takes effect when invoked from the userInputReceived
    * event handler.
    * @param {string} name - the full item name for which the match needs to be removed.
    * @return {EntityResolutionStatus} the status object
    */
    clearItemMatch(name: string): void;
    /**
     * Create display value for bag item of type DATE_TIME.RECURRING
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _getDateTimeRecurringDisplayValue(item: CompositeBagItem, itemValue: object): string;
    /**
     * Configure default display properties for all system entities, and ATTACHMENT and LOCATION item types
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _initSystemEntityDisplayProperties(): void;
    /**
     * Returns display value for a composite bag item raw value using the display properties
     * configured for the system entity
     * INTERNAL ONLY - DO NOT USE - Use getDisplayValue(itemName) instead
     * @return {string} the display value
     * @param {string} entityName - name of the bag item entity type
     * @param {object} rawValue - value of the bag item
     * @private
     */
    private _getDisplayValue;
    /**
     * Clears the cache with information which items should be prompted for a value
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _clearShouldPromptCache(): void;
    /**
     * Returns the cache with information which items should be prompted for a value.
     * @return {object} Cache is a JSON object with item names as key and a boolean value as value.
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _getShouldPromptCache(): any;
}
