import { BaseContext } from '../component/baseContext';
import { PostbackAction as PostbackActionType } from '../message';
import { DataQueryUISettings, ReadOnlyFieldMetadata, Layout } from './dataQueryTypes';
import { PostbackAction } from '../../lib2';
/**
 * The Bots DataQueryContext is a class for changing the result and presentation of SQLDialog data queries
 * </p>
 * A DataQueryContext class instance is passed as an argument to every data query event handler function.
 * @memberof module:Lib
 * @extends BaseContext
 * @alias DataQueryContext
 */
export declare class DataQueryContext extends BaseContext {
    private _queryData;
    private _uiMetadata;
    private _uiDataItemMetadata;
    /**
     * Constructor of data query context.
     * DO NOT USE - INSTANCE IS ALREADY PASSED TO EVENT HANDLERS
     * @param {object} request
     */
    constructor(request: any);
    /**
     * Return the name of the root entity of the query
     * @return {string} root entity name
     */
    getRootEntity(): string;
    /**
     * Returns the result of the query
     * @return {string} query result
     */
    getQueryResult(): any;
    /**
     * Modify the query result
     */
    setQueryResult(result: any): void;
    /**
     * Returns the number of rows returned by the query
     * @return {number} row count
     */
    getRowCount(): number;
    /**
     * Returns the OMRL query
     */
    getOMRLQuery(): string;
    /**
     * Returns the time it took to execute the query
     */
    getQueryExecutionTime(): number;
    /**
     * Returns the SQL query that is executed
     */
    getSQLQuery(): string;
    /**
     * Returns the UI Settings
     */
    getUISettings(): DataQueryUISettings;
    /**
     * Returns the layout used to render the query result set. One of table, form or tableForm.
     */
    getLayout(): Layout;
    /**
     * Change the UI settings
     */
    setUISettings(settings: DataQueryUISettings): void;
    /**
     * Returns an array of the attribute UI settings
     */
    getAttributesUISettings(): ReadOnlyFieldMetadata[];
    /**
     * Returns the attribute UI settings for a specific attribute
     * @param {string} attributeName
     */
    getAttributeUISettings(attributeName: string): ReadOnlyFieldMetadata;
    /**
     * Change the attribute UI settings for a specific attribute
     * @param {string} attributeName
     * @param {ReadOnlyFieldMetadata} settings
     */
    setAttributeUISettings(attributeName: any, settings: any): void;
    /**
     * Create a CMM postback action that when clicked / tapped by the user will execute a follow-up query.
     * @param {string} buttonLabel
     * @param {string} the OMRL query
     * @param {string} the title that is used when displaying the query results
     * @return {PostbackActionType} the postback action to exeute the query
     * @deprecated Use createQueryAction instead, this returns a PostbackAction created using the MessageFactory which replaces the
     * deprecated MessageModel.
     */
    createFollowUpQueryAction(buttonLabel: string, query: string, queryTitle?: string): PostbackActionType;
    /**
     * Create a CMM postback action that when clicked / tapped by the user will execute a follow-up query.
     * @param {string} buttonLabel
     * @param {string} the OMRL query
     * @param {string} the title that is used when displaying the query results
     * @return {PostbackAction} the postback action to exeute the query
     */
    createQueryAction(buttonLabel: string, query: string, queryTitle?: string): PostbackAction;
    /**
     * Return true when the query executed is a follow-up query
     */
    isFollowUpQuery(): boolean;
    /**
     * The end flow  action that is set that can be used to transition to a different flow by defining a mapping for this action in the
     * main flow.
     * @param {string} action - the end flow action that can be used to transition in the main flow
     */
    setEndFlowAction(action: string): void;
    /**
     * Creates a postback action that ends the flow with the specified end flow action.
     * @param {string} the label of the postback button
     * @param {string} action - the end flow action that can be used to transition in the main flow
     */
    createEndFlowPostbackAction(label: string, action: string): PostbackAction;
    /**
     * Invoke another flow
     * @param {string} flowName - name of the flow to invoke
     */
    invokeFlow(flowName: string): void;
    /**
     * Creates a postback action that invokes the specified flow.
     * @param {string} the label of the postback button
     * @param {string} flowName - name of the flow to invoke
     */
    createInvokeFlowPostbackAction(label: any, flowName: any): PostbackAction;
}
