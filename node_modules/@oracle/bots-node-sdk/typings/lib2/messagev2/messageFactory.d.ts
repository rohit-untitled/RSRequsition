import { LocationAction, PostbackAction, ShareAction, CallAction, UrlAction, SubmitFormAction, Keyword, ReadOnlyForm, PaginationInfo, Voice, Row, TableHeading, DatePickerField, MultiSelectField, SelectFieldOption, NumberInputField, SingleSelectField, TextField, TextInputField, TimePickerField, ToggleField, LinkField, Field, ReadOnlyField, TextMessage, Attachment, AttachmentType, AttachmentMessage, Card, CardMessage, CommandMessage, CommandType, EditFormMessage, FormMessage, NonRawMessage, RawMessage, TableMessage, TableFormMessage, TextStreamMessage, StreamState, CustomEventAction, PopupAction, ActionField, MediaField, MediaType, Action } from './internal';
import { ExecuteApplicationActionCommandMessage, UpdateApplicationContextCommandMessage } from './messagePayload';
/**
 * Factory class to create the various message types of Oracle Digital Assistant Conversation Message Model (CMM)
 */
export declare class MessageFactory {
    /**
     * Converts a message from JSON representation into an instance of corresponding message type class.
     * @param {any} json - The JSON representation of the message
     * @returns {NonRawMessage} An instance of a subclass of a NonRawMessage.
     */
    static messageFromJson<T extends NonRawMessage>(json: any): T;
    /**
     * Create a new voice settings object
     * @param {string} text - The text of the voice settings
     * @returns {Voice} A new instance of the Voice class.
     */
    static createVoice(text: string): Voice;
    /**
     * Create a new text message
     * @param {string} text - The text content of the message.
     * @returns {TextMessage} A new instance of the TextMessage class.
     */
    static createTextMessage(text: string): TextMessage;
    /**
     * Create a new text stream message
     * @param {string} text - The latest text chunk of the stream
     * @param {string} aggregateText - Aggregate text that has been streamed so far
     * @param {string} streamId - Unique identifier of the text stream
     * @param {StreamState} streamState - the state of the stream: start, running or end
     * @returns {TextStreamMessage} A new instance of the TextStreamMessage class.
     */
    static createTextStreamMessage(text: string, aggregateText: string, streamId: string, streamState: StreamState): TextStreamMessage;
    /**
     * Creates a new card
     * @param {string} title The title of the card
     * @returns {Card} A new instance of the Card.
     */
    static createCard(title: string): Card;
    /**
     * Creates a new card message
     * @param {Card[]} cards The cards of the message.
     * @returns {CardMessage} A new instance of the CardMessage.
     */
    static createCardMessage(cards?: Card[]): CardMessage;
    /**
     * Creates a new attachment
     * @param {AttachmentType} type The type of the attachment (required).
     * @param {string} url The URL of the attachment (required).
     * @returns {Attachment} A new instance of the Attachment class.
     */
    static createAttachment(type: AttachmentType, url: string): Attachment;
    /**
     * Creates a new attachment message
     * @param {Attachment} attachment The attachment of the message.
     * @returns {AttachmentMessage} A new instance of AttachmentMessage.
     */
    static createAttachmentMessage(attachment: Attachment): AttachmentMessage;
    /**
     * Creates an instance of the CommandMessage class.
     * @param {CommandType} command The command type.
     * @returns {CommandMessage} The created instance of the CommandMessage.
     */
    static createCommandMessage(command: CommandType): CommandMessage;
    /**
     * Creates an instance of the EditFormMessage class.
     * @param {Field[]} fields The list of fields in the edit form message.
     * @returns {EditFormMessage} The created instance of the EditFormMessage.
     */
    static createEditFormMessage(fields?: Field[]): EditFormMessage;
    /**
     * Creates an instance of the ReadOnlyForm class.
     * @param {ReadOnlyField[]} fields The list of fields in the read-only form.
     * @returns {ReadOnlyForm} The created instance of the ReadOnlyForm.
     */
    static createReadOnlyForm(fields?: ReadOnlyField[]): ReadOnlyForm;
    /**
     * Creates an instance of the FormMessage class.
     * @param {ReadOnlyForm[]} forms The list of forms in the message.
     * @returns {FormMessage} The created instance of the FormMessage.
     */
    static createFormMessage(forms?: ReadOnlyForm[]): FormMessage;
    /**
     * Creates an instance of the Row class.
     * @param {ReadOnlyField[]} fields The list of fields in the row
     * @returns {Row} The created instance of the Row.
     */
    static createRow(fields?: ReadOnlyField[]): Row;
    /**
     * Creates an instance of the TableHeading class.
     * @param {string} label The label of the header column
     * @returns {TableHeading} The created instance of the TableHeading.
     */
    static createTableHeading(label: string): TableHeading;
    /**
     * Creates a new instance of TableMessage.
     * @param {TableHeading[]} headings The table headings.
     * @param {Row[]} rows The table rows.
     * @returns {TableMessage} A new instance of TableMessage.
     */
    static createTableMessage(headings?: TableHeading[], rows?: Row[]): TableMessage;
    /**
     * Creates an instance of TableFormMessage.
     * @param {TableHeading[]} headings The table headings.
     * @param {Row[]} rows The table rows.
     * @param {ReadOnlyForm[]} forms The read-only forms.
     * @returns {TableFormMessage} A new instance of TableFormMessage.
     */
    static createTableFormMessage(headings?: TableHeading[], rows?: Row[], forms?: ReadOnlyForm[]): TableFormMessage;
    /**
     * Creates an instance of the RawMessage class.
     * @param {object} payload The message payload.
     * @returns {RawMessage} The created instance of the RawMessage.
     */
    static createRawMessage(payload: object): RawMessage;
    /**
     * Creates an instance of the ExecuteApplicationActionCommandMessage class.
     * @param {string} applicationName The name of the application
     * @param {string} action The action to execute
     * @returns {ExecuteApplicationActionCommandMessage} The created instance of the ExecuteApplicationActionCommandMessage.
     */
    static createExecuteApplicationActionCommandMessage(applicationName: string, action: string): ExecuteApplicationActionCommandMessage;
    /**
     * Creates an instance of the UpdateApplicationContextCommandMessage class.
     * @param {string} applicationName The name of the application
     * @returns {UpdateApplicationContextCommandMessage} The created instance of the UpdateApplicationContextCommandMessage.
     */
    static createUpdateApplicationContextCommandMessage(applicationName: string): UpdateApplicationContextCommandMessage;
    /**
     * Creates an instance of the PaginationInfo class.
     * @param {number} totalCount The total count.
     * @param {number} rangeSize The range size.
     * @param {number} rangeStart The range start.
     * @returns {PaginationInfo} The created instance of the PaginationInfo.
     */
    static createPaginationInfo(totalCount: number, rangeSize: number, rangeStart: number): PaginationInfo;
    /**
     * Create a new postback action
     * @param {string} label The label of the postback action.
     * @param {object} postback The postback associated with the action.
     * @returns {PostbackAction} A new instance of the PostbackAction class.
     */
    static createPostbackAction(label: string, postback: object): PostbackAction;
    /**
     * Create a new custom event handler invocation action
     * @param {string} label The label of the button that invokes the custom event handle when clicked.
     * @param {string} event The name of the custom event handler
     * @returns {CustomEventAction} A new instance of the CustomEventAction class.
     */
    static createCustomEventAction(label: string, event: string): CustomEventAction;
    /**
     * Create a new submit form action
     * @param {string} label The label of the action.
     * @param {object} postback The postback associated with the action.
     * @returns {SubmitFormAction} A new instance of the SubmitFormAction class.
     */
    static createSubmitFormAction(label: string, postback?: object): SubmitFormAction;
    /**
     * Create a new action to send the geo location
     * @param {string} label The label of the action.
     * @returns {LocationAction} A new instance of the LocationAction class.
     */
    static createLocationAction(label: string): LocationAction;
    /**
     * Create a new share action (facebook only)
     * @param {string} label The label of the action.
     * @returns {ShareAction} A new instance of the ShareAction class.
     */
    static createShareAction(label: string): ShareAction;
    /**
     * Create a new URL action
     * @param {string} label The label of the URL action.
     * @param {string} url The URL associated with the action.
     * @returns {UrlAction} A new instance of the UrlAction class.
     */
    static createUrlAction(label: string, url: string): UrlAction;
    /**
     * Create a new Popup action
     * @param {string} label The label of the Popup action.
     * @param {NonRawMessage} popupContent The content shown in the popup.
     * @returns {PopupAction} A new instance of the PopupAction class.
     */
    static createPopupAction(label: string, popupContent: NonRawMessage): PopupAction;
    /**
     * Create a new Call action
     * @param {string} label The label of the Call action.
     * @param {string} phoneNumber The phone number associated with the call action.
     * @returns {CallAction} A new instance of the CallAction class.
     */
    static createCallAction(label: string, phoneNumber: string): CallAction;
    /**
     * Creates an instance of Keyword.
     * @param {any} postback The postback to set.
     * @param {string[]} keywords The keywords to set.
     * @returns {Keyword} A new instance of the Keyword class.
     */
    static createKeyword(postback: any, keywords?: string[]): Keyword;
    /**
     * Creates an instance of the DatePickerField class.
     * @param {string} id The ID of the date picker field.
     * @param {string} label The label of the field.
     * @returns {DatePickerField} The created instance of the DatePickerField.
     */
    static createDatePickerField(id: string, label: string): DatePickerField;
    /**
     * Creates an instance of the SingleSelectField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @param {SelectFieldOption[]} options The options of the field.
     * @returns {SingleSelectField} The created instance of the SingleSelectField.
     */
    static createSingleSelectField(id: string, label: string, options?: SelectFieldOption[]): SingleSelectField;
    /**
     * Creates an instance of the MultiSelectField class.
     * @param {string} id The ID of the field.
     * @param {string} label The label of the field.
     * @param {SelectFieldOption[]} options The options of the field.
     * @returns {MultiSelectField} The created instance of the MultiSelectField.
     */
    static createMultiSelectField(id: string, label: string, options?: SelectFieldOption[]): MultiSelectField;
    /**
     * Creates an instance of the SelectFieldOption class.
     * @param {string} label The label of the option.
     * @param {any} value The value of the option. If not specified, the label is used as the value.
     * @returns {SelectFieldOption} The created instance of the SelectFieldOption.
     */
    static createSelectFieldOption(label: string, value?: any): SelectFieldOption;
    /**
     * Creates an instance of the NumberInputField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @returns {NumberInputField} The created instance of the NumberInputField.
     */
    static createNumberInputField(id: string, label: string): NumberInputField;
    /**
     * Creates an instance of the TextField class.
     * @param {string} label The label of the field.
     * @param {any} value The value of the field.
     * @returns {TextField} The created instance of the TextField.
     */
    static createTextField(label: string, value: any): TextField;
    /**
     * Creates an instance of the TextInputField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @returns {TextInputField} The created instance of the TextInputField.
     */
    static createTextInputField(id: string, label: string): TextInputField;
    /**
     * Creates an instance of the TimePickerField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @returns {TimePickerField} The created instance of the TimePickerField.
     */
    static createTimePickerField(id: string, label: string): TimePickerField;
    /**
     * Creates an instance of the ToggleField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @param {any} valueOff The value when the toggle is off.
     * @param {any} valueOn The value when the toggle is on.
     * @returns {ToggleField} The created instance of the ToggleField.
     */
    static createToggleField(id: string, label: string, valueOff: any, valueOn: any): ToggleField;
    /**
     * Creates an instance of the LinkField class.
     * @param {string} label The label of the link field.
     * @param {string} value The value of the link field.
     * @param {string} linkLabel The link label of the link field.
     * @returns {LinkField} The created instance of the LinkField.
     */
    static createLinkField(label: string, value: string, linkLabel: string): LinkField;
    /**
     * Creates an instance of the ActionField class.
     * @param action The action of the action field.
     * @returns The created instance of the ActionField.
     */
    static createActionField(action: Action): ActionField;
    /**
     * Creates an instance of the MediaField class.
     * @param label The label of the field.
     * @param value The URL value of the field
     * @param mediaType The media type for the field.
     * @returns The created instance of the MediaField.
     */
    static createMediaField(label: string, value: string, mediaType: MediaType): MediaField;
}
