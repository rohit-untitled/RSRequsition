import { EditableField } from '../internal';
/**
 * Represents a text input field.
 * @extends EditableField
 */
export declare class TextInputField extends EditableField {
    readonly displayType: string;
    private validationRegularExpression?;
    private multiLine?;
    private minLength?;
    private maxLength?;
    private defaultValue?;
    private inputStyle?;
    /**
     * Creates an instance of the TextInputField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     */
    constructor(id: string, label?: string);
    /**
     * Gets the validationRegularExpression value of the field.
     * @returns {string} The validationRegularExpression value of the field.
     */
    getValidationRegularExpression(): string;
    /**
     * Sets the validationRegularExpression value of the field.
     * @param {string} validationRegularExpression The validationRegularExpression value to set.
     * @returns The updated instance of the TextInputField.
     */
    setValidationRegularExpression(validationRegularExpression: string): this;
    /**
     * Gets the multiLine value of the field.
     * @returns {Boolean} The multiLine value of the field.
     */
    getMultiLine(): boolean;
    /**
     * Sets the multiLine value of the field.
     * @param {boolean} multiLine The multiLine value to set.
     * @returns The updated instance of the TextInputField.
     */
    setMultiLine(multiLine: boolean): this;
    /**
     * Gets the minLength value of the field.
     * @returns {number} The minLength value of the field.
     */
    getMinLength(): number;
    /**
     * Sets the minLength value of the field.
     * @param {number} minLength The minLength value to set.
     * @returns The updated instance of the TextInputField.
     */
    setMinLength(minLength: number): this;
    /**
     * Gets the maxLength value of the field.
     * @returns {number} The maxLength value of the field.
     */
    getMaxLength(): number;
    /**
     * Sets the maxLength value of the field.
     * @param {number} maxLength The maxLength value to set.
     * @returns The updated instance of the TextInputField.
     */
    setMaxLength(maxLength: number): this;
    /**
     * Gets the defaultValue value of the field.
     * @returns {string} The defaultValue value of the field.
     */
    getDefaultValue(): string;
    /**
     * Sets the defaultValue value of the field.
     * @param {string} defaultValue The defaultValue value to set.
     * @returns The updated instance of the TextInputField.
     */
    setDefaultValue(defaultValue: string): this;
    /**
     * Gets the inputStyle value of the field.
     * @returns {InputStyle} The inputStyle value of the field.
     */
    getInputStyle(): InputStyle;
    /**
     * Sets the inputStyle value of the field.
     * @param {InputStyle} inputStyle The inputStyle value to set.
     * @returns The updated instance of the TextInputField.
     */
    setInputStyle(inputStyle: InputStyle): this;
}
/**
 * Represents the input style options for a text input field.
 */
export declare enum InputStyle {
    text = "text",
    tel = "tel",
    url = "url",
    email = "email",
    password = "password"
}
