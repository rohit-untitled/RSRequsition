import { ReadOnlyField, FontSize, FontWeight } from '../internal';
/**
 * Represents a text field.
 * @extends ReadOnlyField
 */
export declare class TextField extends ReadOnlyField {
    readonly displayType: string;
    private truncateAt?;
    private fontSize?;
    private fontWeight?;
    /**
     * Creates an instance of the TextField class.
     * @param {string} id The unique identifier of the field.
     * @param {string} label The label of the field.
     * @param {any} value The value of the field
     */
    constructor(label: string, value: any);
    /**
     * Gets the truncateAt value of the field.
     * @returns The truncateAt value of the field.
     */
    getTruncateAt(): number;
    /**
     * Sets the truncateAt value of the field.
     * @param truncateAt The truncateAt value to set.
     * @returns The updated instance of the TextField.
     */
    setTruncateAt(truncateAt: number): this;
    /**
     * Gets the fontSize value of the field.
     * @returns The fontSize value of the field.
     */
    getFontSize(): FontSize;
    /**
     * Sets the fontSize value of the field.
     * @param fontSize The fontSize value to set.
     * @returns The updated instance of the TextField.
     */
    setFontSize(fontSize: FontSize): this;
    /**
     * Gets the fontWeight value of the field.
     * @returns The fontWeight value of the field.
     */
    getFontWeight(): FontWeight;
    /**
     * Sets the fontWeight value of the field.
     * @param fontWeight The fontWeight value to set.
     * @returns The updated instance of the TextField.
     */
    setFontWeight(fontWeight: FontWeight): this;
}
