import { TextMessage } from './textMessage';
/**
 * Represents a text stream message.
 * @extends TextMessage
 */
export declare class TextStreamMessage extends TextMessage {
    private aggregateText;
    private streamId;
    private streamState;
    readonly type: string;
    /**
     * Create a new TextStreamMessage object.
     * @param {string} text - The latest text chunk of the stream
     * @param {string} aggregateText - Aggregate text that has been streamed so far
     * @param {string} streamId - Unique identifier of the text stream
     * @param {StreamState} streamState - the state of the stream: start, running or end
     */
    constructor(text: string, aggregateText: string, streamId: string, streamState: StreamState);
    /**
     * Get the aggregate text content of the message.
     * @returns {string} The aggregate message text.
     */
    getAggregateText(): string;
    /**
     * Set the aggregate text content of the message.
     * @param {string} aggregateText - The text to set.
     * @returns {TextStreamMessage} The current instance of the TextStreamMessage class.
     */
    setAggregateText(aggregateText: string): this;
    /**
     * Get the ID of the text stream
     * @returns {string} The stream ID
     */
    getStreamId(): string;
    /**
     * Get the state of the text stream
     * @returns {StreamState} The stream state
     */
    getStreamState(): StreamState;
}
/**
 * Represents the state of the text stream
 */
export declare enum StreamState {
    start = "start",
    running = "running",
    end = "end"
}
