import { NonRawMessage, ReadOnlyForm, TableHeading, Row, PaginationInfo } from '../internal';
/**
 * Represents a table form message.
 * @extends NonRawMessage
 */
export declare class TableFormMessage extends NonRawMessage {
    readonly type: string;
    private headings;
    private rows;
    private forms;
    private formColumns;
    private showFormButtonLabel?;
    private paginationInfo?;
    private disclosedFormIndex?;
    /**
     * Deserialize nested object properties into corresponding class instances
     */
    deserializeNestedProperties(): void;
    /**
     * Creates an instance of TableFormMessage.
     * @param {TableHeading[]} headings The table headings.
     * @param {Row[]} rows The table rows.
     * @param {ReadOnlyForm[]} forms The read-only forms.
     */
    constructor(headings?: TableHeading[], rows?: Row[], forms?: ReadOnlyForm[]);
    /**
     * Gets the table headings.
     * @returns {TableHeading[]} The table headings.
     */
    getHeadings(): TableHeading[];
    /**
     * Sets the table headings.
     * @param {TableHeading[]} headings The table headings.
     * @returns {this} The current instance of TableFormMessage.
     */
    setHeadings(headings: TableHeading[]): this;
    /**
     * Adds a heading to the table.
     * @param {TableHeading} heading The heading to add.
     * @returns {this} The current instance of TableFormMessage.
     */
    addHeading(heading: TableHeading): this;
    /**
     * Gets the table rows.
     * @returns {Row[]} The table rows.
     */
    getRows(): Row[];
    /**
     * Sets the table rows.
     * @param {Row[]} rows The table rows.
     * @returns {this} The current instance of TableFormMessage.
     */
    setRows(rows: Row[]): this;
    /**
     * Adds a row to the table.
     * @param {Row} row The row to add.
     * @returns {this} The current instance of TableFormMessage.
     */
    addRow(row: Row): this;
    /**
     * Gets the read-only forms.
     * @returns {ReadOnlyForm[]} The read-only forms.
     */
    getForms(): ReadOnlyForm[];
    /**
     * Sets the read-only forms.
     * @param {ReadOnlyForm[]} forms The read-only forms.
     * @returns {this} The current instance of TableFormMessage.
     */
    setForms(forms: ReadOnlyForm[]): this;
    /**
     * Adds a read-only form.
     * @param {ReadOnlyForm} form The form to add.
     * @returns {this} The current instance of TableFormMessage.
     */
    addForm(form: ReadOnlyForm): this;
    /**
     * Gets the number of form columns.
     * @returns {number} The number of form columns.
     */
    getFormColumns(): number;
    /**
     * Sets the number of form columns.
     * @param {number} formColumns The number of form columns.
     * @returns {this} The current instance of TableFormMessage.
     */
    setFormColumns(formColumns: number): this;
    /**
     * Gets the label for the show form button.
     * @returns {string} The label for the show form button.
     */
    getShowFormButtonLabel(): string;
    /**
     * Sets the label for the show form button.
     * @param {string} showFormButtonLabel The label for the show form button.
     * @returns {this} The current instance of TableFormMessage.
     */
    setShowFormButtonLabel(showFormButtonLabel: string): this;
    /**
     * Gets the pagination information.
     * @returns {PaginationInfo} The pagination information.
     */
    getPaginationInfo(): PaginationInfo;
    /**
     * Sets the pagination information.
     * @param {PaginationInfo} paginationInfo The pagination information.
     * @returns {this} The current instance of TableFormMessage.
     */
    setPaginationInfo(paginationInfo: PaginationInfo): this;
    /**
     * Gets the index of the disclosed form.
     * @returns {number} The index of the disclosed form.
     */
    getDisclosedFormIndex(): number;
    /**
     * Sets the index of the disclosed form.
     * @param {number} disclosedFormIndex The index of the disclosed form.
     * @returns {this} The current instance of TableFormMessage.
     */
    setDisclosedFormIndex(disclosedFormIndex: number): this;
}
