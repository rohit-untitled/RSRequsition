import { CommandMessage } from '../internal';
/**
 * Represents the context source that initiates the application context update
 */
export declare enum ContextSource {
    chatWindow = "chatWindow",
    UIWidget = "UIWidget",
    skill = "skill"
}
/**
 * Represents an update context command message.
 * This message is used in co-pilot where the application context can be sent from the client to the skill to
 * invoke or resume a flow, or it is sent from the skill to the client to trigger application navigation.
 *
 * @extends CommandMessage
 */
export declare class UpdateApplicationContextCommandMessage extends CommandMessage {
    readonly type: string;
    private applicationName;
    private pageName?;
    private fieldName?;
    private parameters?;
    private source;
    private reset?;
    /**
     * Creates an instance of the UpdateContextCommandMessage class.
     * @param {string} applicationName The command type.
     */
    constructor(applicationName: string);
    /**
     * Gets the context source
     * @returns {ContextSource} The context source
     */
    getSource(): ContextSource;
    /**
     * Sets the context source
     * @param {ContextSource} The context source
     * @returns {this} The updated instance of the UpdateContextCommandMessage.
     */
    setSource(source: ContextSource): this;
    /**
     * Gets the application name
     * @returns {string} The name of the application
     */
    getApplicationName(): string;
    /**
     * Sets the application name
     * @param {string} The name of the application
     * @returns {this} The updated instance of the UpdateContextCommandMessage.
     */
    setApplicationName(applicationName: string): this;
    /**
     * Gets the page name
     * @returns {string} The name of the page
     */
    getPageName(): string;
    /**
     * Sets the page name
     * @param {string} The name of the page
     * @returns {this} The updated instance of the UpdateContextCommandMessage.
     */
    setPageName(pageName: string): this;
    /**
     * Gets the field name
     * @returns {string} The name of the field
     */
    getFieldName(): string;
    /**
     * Sets the field name
     * @param {string} The name of the field
     * @returns {this} The updated instance of the UpdateContextCommandMessage.
     */
    setFieldName(fieldName: string): this;
    /**
     * Gets the parameters of the message.
     * @returns {Map<string, any>} The parameters of the message.
     */
    getParameters(): Map<string, any>;
    /**
     * Gets the value of a parameter.
     * @param {string} parameterName The name of the parameter.
     * @returns {any} The parameter value.
     */
    getParameterValue(parameterName: string): any;
    /**
     * Sets the parameters of the message.
     * @param {Map<string, any>} parameters The parameters to set.
     * @returns {this} The current instance of the UpdateContextCommandMessage class.
     */
    setParameters(parameters: Map<string, any>): this;
    /**
     * Add a parameter to the message.
     * @param {string} name The name of the parameter.
     * @param {any} value The value of the parameter.
     * @returns {this} The current instance of the UpdateContextCommandMessage class.
     */
    addParameter(name: string, value: any): this;
    /**
     * Returns the flow reset flag
     * @returns {boolean} flow reset flag
     */
    getReset(): boolean;
    /**
     * Set the flow reset flag
     * @param {boolean} reset The reset flag
     * @returns {this} The current instance of the UpdateContextCommandMessage class.
     */
    setReset(reset: boolean): this;
}
