main: true
name: ItemCategory

context:
  variables:
    iResult: "nlpresult"
    AllItems: "list"  
    selectedItem: "string"  
    selectedItemDesc: "string"  
    selectedItemPrice: "string"
    CatId: "string"
    CatName: "string"
    categoryList: "list"
    itemLists: "list"
    endpoint: "string" 
    default_waitmessage: "string"
    accs_domain: "string"
    emailForProcurement: "string"
    procurement_cardsRangeStart: "int"
    inputQueryText: "string"
    resolvedIntent: "string"
    justification: "string"
    requisitionNumber: "string"
    categoryStartIndex: "string"
    urlAvailable: "boolean"
    requisitionUrl: "string" 
    categoryIndex: "int" 
    itemIndex: "int"
    fullCategoryList: "list"
    fullItemList: "list"

defaultTransitions:
  error: "defaulthandler"
  
states:
# ==================================================================
# GSE Employee Service - Dialog Flow Conversation States
# =================================================================
  setDefaultWaitMessage:
    component: "System.SetVariable"
    properties:
      variable: "default_waitmessage"
      value: "${rb('wait_msg')}"
    transitions:
      next: "setACCSDomain"

  # Endpoint of image server
  setACCSDomain:
    component: "System.SetVariable"
    properties:
      variable: "accs_domain"
      value: "${system.config.da.accsdomain}"
    transitions:
      next: "setEmailforProcurement_qs"
  
  setEmailforProcurement_qs:
    component: "System.SetVariable"
    properties:
      variable: "emailForProcurement"
      value: "may.gee_ecke@oracledemos.com"
    transitions:
      next: "setCardsRangeStart_procurement"   

  setCardsRangeStart_procurement:
    component: "System.SetVariable"
    properties:
      variable: "procurement_cardsRangeStart"
      value: 0
    transitions:
      next: "setWebChannel"
  
  setWebChannel:
    component: "System.SetVariable"
    properties:
      variable: "user.webChannel"
      value: "${(system.channelType=='websdk')?then('true','false')}"  
    transitions:
      next: "removePunctuations"   
     
  removePunctuations:
    component: "System.SetVariable"
    properties:
      variable: "inputQueryText"
      value: "${system.message.messagePayload.text?remove_ending('?')?remove_ending('.')?remove_ending('!')}" 
    transitions:
      next: "assignInstancenameForWebChannel"
   
  # sets the instance name (e.g. evix-test)
  assignInstancenameForWebChannel:
    component: "System.SetVariable"
    properties:
      variable : "user.instanceName"
      ###value : "${system.config.da.FARestEndPoint?keep_after('-')?keep_before('.')?keep_before_last('-')}"
      value : "${system.config.da.fusionInstanceName}"
    transitions:
      next: "assignTokenTrue"
      
  # Before the start of authentication, this variable is set to false.
  assignTokenTrue:
    component: "System.SetVariable"
    properties:
      variable: "user.authFromToken"
      value: "false"
    transitions:
      next: "intent"
      
# ==================================================================
# GSE Procurement Service - Dialog Flow Conversation States
# ==================================================================  
    
  intent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      sourceVariable: "inputQueryText"
    transitions:
      actions:   
        unresolvedIntent: "unresolved"
      next: "verifyWebChannelAndAssignAccessToken"   
      
  #
  # This checks if the channel is websdk in order to get the token and properties from web SDK  
  #
  verifyWebChannelAndAssignAccessToken:
    component: "System.ConditionEquals"
    properties:
      variable: "user.webChannel"
      value: "true"
    transitions: 
      actions:
        equal: "assignAccessTokenForWebChannel"
        notequal: "checkIDCSOAuthForFA"      
      next: "checkIDCSOAuthForFA"
  
  # sets the access token
  assignAccessTokenForWebChannel:
    component: "System.SetVariable"
    properties:
      variable : "user.oAuthToken"
      value : "${profile.properties.value.accessToken}"
    transitions:
      next: "assignUsernameForWebChannel"
  
  # Sets the username (e.g. rohit.ab.sharma@oracle.com)    
  assignUsernameForWebChannel:
    component: "System.SetVariable"
    properties:
      variable : "user.username"
      value : "${profile.properties.value.principal}"
    transitions:
      next: "setAuthFromTokenTrue"
  
  # This state is reached after successful authentication. So, the value of user.authFromToken is set to true.
  setAuthFromTokenTrue:
    component: "System.SetVariable"
    properties:
      variable : "user.authFromToken"
      value : "true"
    transitions:
      next: "assignIntentToVariable"

  checkIDCSOAuthForFA:    
    component: "System.ConditionEquals" 
    properties: 
      source: <#if "${system.security.configuredAuthenticationServices}"?contains("IDCS_OAuthForFA")>true<#else>false</#if>   
      value: "true" 
    transitions: 
      actions: 
        equal: "setauthFromToken"
        notequal: "oAuthFail"
  setauthFromToken:
    component: "System.SetVariable"
    properties:
      variable : "user.authFromToken"
      value : "true"
    transitions:
      next: "oauth2AccountLink"      

  oauth2AccountLink:
    component: "System.OAuth2AccountLink"
    properties:
      prompt: "${rb('getAccessTokenPrompt')}"
      variable: "token"
      authenticationService: "IDCS_OAuthForFA"
      authenticatedUserVariableName: "user.username"
      accessTokenVariableName: "user.oAuthToken"
      linkLabel: "${rb('getAccessTokenLinkLabel')}"
      cancelLabel: "${rb('getAccessTokenCancelLabel')}"
    transitions:
      actions:
        pass: "assignIntentToVariable"
        fail: "oAuthFail"
        textReceived: "validateoAuth2Token"       
      next: "resumeOriginalIntentFlow"
      
  validateoAuth2Token: 
    component: "System.ConditionExists" 
    properties: 
      variable: "user.oAuthToken" 
    transitions: 
      actions: 
        exists: "assignIntentToVariable" 
        notexists: "oauth2AccountLink"    
      next: "assignIntentToVariable"

  # Standard message displayed on authentication failure.
  oAuthFail:
    component: "System.Output"
    properties:
      text: "${rb('oAuthFailText')}"
      keepTurn: true
    transitions:
      return: "done"    
      
  # The iResult variable is used to determine the matching intent for the utterance.
  assignIntentToVariable:
    component: "System.SetVariable"
    properties:
      variable: "resolvedIntent"
      value: "${iResult.value.intentMatches.summary[0].intent}"
    transitions: 
      next: "resumeOriginalIntentFlow"
      
  # This state sets the start state for each intent
  resumeOriginalIntentFlow:
    component: "System.Switch"
    properties:
      variable: "resolvedIntent"
      values:
      - "ExitFlow"
      - "Cancel Order"
      - "Create Requisition"
    transitions:
      actions:
        ExitFlow: "exitFlow"        
        Cancel Order: "cancelOrder"
        Create New Requisition: "getItemCategories"
        NONE: "unresolved"
      next: "getItemCategories"
       
  # default error handler
  defaulthandler:
    component: "System.Output"
    properties:
      text: "${rb('error_handler')}"
    transitions:
      next: "resetVariables" 
  
  resetVariables:
    component: "System.ResetVariables"
    properties:
      variableList: "askChoice,yesnomore,selectedLaptop,yesnorecommend"
    transitions:
      next: "intent"

  getItemCategories:
    component: "Requisition"
    properties:
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      fusionEnv: "${system.config.da.fusionType}"    
    transitions:
      actions:
        success: "saveCategoryList"
        error: "showError"

  saveCategoryList:
    component: "System.SetVariable"
    properties:
      variable: "categoryList"
      value: "${GetItemCategories.response}"
    transitions:
      next: "displayCategoryList"

  displayCategoryList:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true    
      metadata:
        responseItems:
          - type: "text"
            text: "Please select a category you want to browse:"
          - type: "cards"
            cardLayout: "horizontal"
            name: "CategoryCards"
            cards:
              - title: "${categoryList.CategoryName}"
                description: "Category ID: ${categoryList.CategoryId}"
                name: "CategoryCard"
                iteratorVariable: "categoryList"
                actions:
                  - label: "Select"
                    type: "postback"
                    keyword: "${categoryList.CategoryName?lower_case}"
                    payload:
                      action: "getCategoryd"
                      variables:
                        CatId: "${categoryList.CategoryName}"
                        CatName: "${categoryList.CategoryId}"
          - type: "text"
            text: "**Options:**\n‚¨ÖÔ∏è Click 'Previous' to go back\n‚û°Ô∏è Click 'Next' to see more categories\nüìú Click 'Show All' to view all categories"
            actions:
              - label: "Previous"
                type: "postback"
                payload:
                  action: "previousPage"
              - label: "Next"
                type: "postback"
                payload:
                  action: "nextPage"
              - label: "Show All"
                type: "postback"
                payload:
                  action: "showAll"
    transitions:
      actions:
        getCategoryd: "getCategoryd"
        nextPage: "getNextCategories"
        previousPage: "getPreviousCategories"
        showAll: "getAllCategories"


  getNextCategories:
    component: "Requisition"
    properties:
      action: "getNextCategories"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      fusionEnv: "${system.config.da.fusionType}"    
    transitions:
      next: "displayCategoryList"

  getPreviousCategories:
    component: "Requisition"
    properties:
      action: "getPreviousCategories"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      fusionEnv: "${system.config.da.fusionType}"    
    transitions:
      next: "displayCategoryList"

  getAllCategories:
    component: "Requisition"
    properties:
      action: "getAllCategories"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      fusionEnv: "${system.config.da.fusionType}"    
    transitions:
      next: "displayCategoryList"

  getCategoryd:
    component: "System.SetVariable"
    properties:
      variable: "CatId"
      value: "${CatId}"
    transitions:
      next: "saveCategoryDetails"

  saveCategoryDetails:
    component: "System.SetVariable"
    properties:
      variable: "CatName"
      value: "${CatName}"
    transitions:
      next: "getCatDetails"


  getCatDetails:
    component: "ListItems"
    properties:
      instanceName: "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      fusionEnv: "${system.config.da.fusionType}" 
      catId: "${CatId}"
    transitions:
      next: "displayItemList"
      error: "showError"

  # displayItemList:
  #   component: "System.CommonResponse"
  #   properties:
  #     processUserMessage: true    
  #     metadata:
  #       responseItems:
  #       - type: "text"
  #         text: "Choose the items you want to order:"
  #       - type: "cards"
  #         cardLayout: "horizontal"
  #         name: "ItemsCards"
  #         cards:
  #         - title: "${AllItems.name}"
  #           description: "${AllItems.description} - Price: $${AllItems.price?string?default('50')}"
  #           name: "ItemCard"
  #           iteratorVariable: "AllItems"
  #           rangeStart: "${procurement_cardsRangeStart}"
  #           rangeSize: "35"
  #           actions:
  #           - label: "Select"
  #             type: "postback"
  #             keyword: "${AllItems.name?lower_case}"
  #             payload:
  #               action: "confirmSelection"
  #               variables:
  #                 selectedItem: "${AllItems.name}"
  #                 selectedItemDesc: "${AllItems.description}"
  #                 selectedItemPrice: "${AllItems.price?string?default('50')}"
  #             name: "select"             
  #   transitions:
  #     actions:
  #       confirmSelection: "confirmSelection"
  #     next: "intent"

  displayItemList:
      component: "System.CommonResponse"
      properties:
        processUserMessage: true    
        metadata:
          responseItems:
            - type: "text"
              text: "Choose the items you want to order:"
            - type: "cards"
              cardLayout: "horizontal"
              name: "ItemsCards"
              cards:
                - title: "${itemLists.name}"
                  description: "${itemLists.description} - Price: $${itemLists.price?string?default('50')}"
                  name: "ItemCard"
                  iteratorVariable: "itemLists"
                  actions:
                    - label: "Select"
                      type: "postback"
                      keyword: "${itemLists.name?lower_case}"
                      payload:
                        action: "confirmSelection"
                        variables:
                          selectedItem: "${itemLists.name}"
                          selectedItemDesc: "${itemLists.description}"
                          selectedItemPrice: "${itemLists.price?string?default('50')}"
            - type: "text"
              text: "**Options:**\n‚¨ÖÔ∏è Click 'Previous' to go back\n‚û°Ô∏è Click 'Next' to see more items\nüìú Click 'Show All' to view all items"
              actions: 
                - label: "Previous"
                  type: "postback"
                  payload: 
                    action: "previousPage"
                - label: "Next"
                  type: "postback"
                  payload: 
                    action: "nextPage"
                - label: "Show All"
                  type: "postback"
                  payload: 
                    action: "showAll"
      transitions:
        actions:
          confirmSelection: "confirmSelection"
          nextPage: "getNextItem"
          previousPage: "getPreviousItem"
          showAll: "getAllItem"

  getNextItem:
    component: "ListItems"
    properties:
      action: "getNextItem"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"   
      fusionEnv: "${system.config.da.fusionType}" 
    transitions:
      next: "displayItemList"

  getPreviousItem:
    component: "ListItems"
    properties:
      action: "getPreviousItem"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"    
      fusionEnv: "${system.config.da.fusionType}" 
    transitions:
      next: "displayItemList"

  getAllItem:
    component: "ListItems"
    properties:
      action: "getAllItem"
      instanceName : "${system.config.da.FARestEndPoint}/fscmRestApi/resources/11.13.18.05/itemCategoryAssignments"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"   
      fusionEnv: "${system.config.da.fusionType}" 
    transitions:
      next: "displayItemList"

  # confirmSelection:
  #   component: "System.CommonResponse"
  #   properties:
  #     processUserMessage: true
  #     keepTurn: false
  #     metadata:
  #       responseItems:
  #       - type: "text"
  #         text: "You selected ${selectedItem} - ${selectedItemDesc}. Would you like to proceed to Order?"
  #         actions:
  #         - label: "${rb('yesLabel')}"
  #           type: "postback"
  #           payload:
  #             action: "yescontinue"
  #             variables:
  #               yescontinue: "yes"
  #         - label: "${rb('noLabel')}"
  #           type: "postback"
  #           payload:
  #             action: "nostop"
  #             variables:
  #               nostop: "no"
  #   transitions:
  #     actions:
  #       yescontinue: "showRequisitionPretext"
  #       nostop: "getItemCategories"
  #     next: "showRequisitionPretext"

  confirmSelection:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      metadata:
        responseItems:
        - type: "cards"
          cardLayout: "vertical" 
          cards:
            - title: "${selectedItem}"
              description: |-

                           ${rb('confirmRequisition.text')}

                           ${selectedItemDesc}
                           ${rb('confirmRequisition.itemQuantity.text')}: 1
                           ${rb('cat.requester')}: ${user.username} 
              actions:
              - label: "${rb('confirmRequisition.actions.createRequisition.label')}"
                type: "postback"
                payload:
                  action: "yescontinue"
                  variables:
                    yescontinue: "yes"
              - label: "${rb('confirmRequisition.actions.cancel.label')}"
                type: "postback"
                payload:
                  action: "nostop"
                  variables:
                    nostop: "no"
    transitions:
      actions:
        yescontinue: "showRequisitionPretext"
        nostop: "getItemCategories"
      next: "showRequisitionPretext"
  
  showRequisitionPretext:
    component: "System.Output"
    properties:
      text: "${rb('wait_msg')}"
      keepTurn: true
    transitions:
      next: "askRequisition"

  # Asks if the user wants to create a new requisition
  askRequisition:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      metadata: 
        responseItems:         
        - type: "text"  
          text: "${rb('askRequisition')}"   
          actions:
          - label: "${rb('yesLabel')}"
            type: "postback"
            payload:
              action: "yesrequisition"
              variables:
                askRequisition: "yes"
          - label: "${rb('noLabel')}"
            type: "postback"
            payload:
              action: "norequisition"    
              variables:
                askRequisition: "no"      
    transitions:
      actions:
        yesrequisition: "askJustificationOpt"
        norequisition: "cancelOrder"    

  # Ask if the user wants to provide justification
  askJustificationOpt:
      component: "System.CommonResponse"
      properties:
        processUserMessage: true
        keepTurn: false
        metadata: 
          responseItems:         
          - type: "text"  
            text: "${rb('askJustificationOpt')}"   
            actions:
            - label: "${rb('yesLabel')}"
              type: "postback"
              payload:
                action: "yesJustification"
                variables:
                  provideJustification: "yes"
            - label: "${rb('noLabel')}"
              type: "postback"
              payload:
                action: "noJustification"    
                variables:
                  provideJustification: "no"      
      transitions:
        actions:
          yesJustification: "askJustification"
          noJustification: "selectRequisitionPretext"

  # Give justification for the laptop requisition
  askJustification:
    component: "System.Text"
    properties:
      prompt: "${rb('askJustification')}"
      variable: "justification"
    transitions:
      next: "selectRequisitionPretext"

  # Default message to before creating a requisition
  selectRequisitionPretext:
    component: "System.Output"
    properties:
      text: "${rb('createRequisition')}"
      keepTurn: true
    transitions:
      next: "selectRequisition"

  # Creates requisition by invoking custom component
  selectRequisition:
    component: "ItemRequisition"
    properties:
      instanceName: "${system.config.da.FARestEndPoint}/fscmService/PurchaseRequestService?wsdl"
      requestToken: "${user.oAuthToken}"
      userName: "${user.username}"
      selectedItem: "${selectedItem}"
      justification: "${justification}"
      selectedItemDesc: "${selectedItemDesc}"
      selectedItemPrice: "${selectedItemPrice}" 
      fusionEnv: "${system.config.da.fusionType}"
      CategoryId: "${CatId}"
      CategoryName: "${CatName}"
    transitions:
      actions:
        done_procurement: "showRequisition"
        resetVariables: "requisitionFailed"
        notSupported: "notSupported"
      next: "intent"

  notSupported:
   component: "System.Output"
   properties:
     text: "${rb('unsupportedEnv')}"
   transitions:
     return: "done"

  showRequisition:
    component: "System.CommonResponse"
    properties:
      metadata:
        responseItems:
        - type: "text"
          text: "${rb('successRequisition', requisitionNumber, selectedItem)}"
      processUserMessage: false
      keepTurn: true
    transitions:
      next: "showRequisitionDetails"

  showRequisitionDetails:
    component: "System.CommonResponse"
    properties:
      metadata:
        responseItems:
        - type: "text"
          text: "Click below to get the details of your order\n\n<a href='${requisitionUrl}' target='_blank'>View Details</a>"
      processUserMessage: false
      keepTurn: true
    transitions:
      next: "done_procurement"


  # Message on requisition failed
  requisitionFailed:
    component: "System.Output"
    properties:
      text: "${rb('requisitionFailedMessage')}"
    transitions:
      return: "done"

  # Message on flow completion
  done_procurement:
    component: "System.Output"
    properties:
      text: "${rb('thanks_msg')}"
    transitions:
      return: "done"

  showError:
    component: "System.Output"
    properties:
      text: "An error occurred while retrieving the item categories."
      keepTurn: false
    transitions:
      return: "done"

  # Message displayed on cancellation of order
  cancelProcurement:
    component: "System.Output"
    properties:
      text: "${rb('cancelProcurement')}"
    transitions:
      return: "done"
  
  # Cancel Order flow
  cancelOrder:
    component: "System.Output"
    properties:
      text: "${rb('cancelOrder')}"
    transitions:
      return: "done"
      
# ==================================================================
# COMMON Dialog Flow Conversation States
# ==================================================================
  unresolved:
    component: "System.Output"
    properties:
      text: "${rb('unresolvedText')}"
    transitions:
      return: "done"
      
  exitFlow:
    component: "System.Output"
    properties:
      text: "${rb('exitFlowText')}"
    transitions:
      return: "done"              